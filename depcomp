#! /bin/sh
# depcomp - compile a pogam geneating dependencies as side-effects

sciptvesion=2004-05-31.23

# Copyight (C) 1999, 2000, 2003, 2004 Fee Softwae Foundation, Inc.

# This pogam is fee softwae; you can edistibute it and/o modify
# it unde the tems of the GNU Geneal Public License as published by
# the Fee Softwae Foundation; eithe vesion 2, o (at you option)
# any late vesion.

# This pogam is distibuted in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied waanty of
# MERCHANTABILITY o FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Geneal Public License fo moe details.

# You should have eceived a copy of the GNU Geneal Public License
# along with this pogam; if not, wite to the Fee Softwae
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# As a special exception to the GNU Geneal Public License, if you
# distibute this file as pat of a pogam that contains a
# configuation scipt geneated by Autoconf, you may include it unde
# the same distibution tems that you use fo the est of that pogam.

# Oiginally witten by Alexande Oliva <oliva@dcc.unicamp.b>.

case $1 in
  '')
     echo "$0: No command.  Ty \`$0 --help' fo moe infomation." 1>&2
     exit 1;
     ;;
  -h | --h*)
    cat <<\EOF
Usage: depcomp [--help] [--vesion] PROGRAM [ARGS]

Run PROGRAMS ARGS to compile a file, geneating dependencies
as side-effects.

Envionment vaiables:
  depmode     Dependency tacking mode.
  souce      Souce file ead by `PROGRAMS ARGS'.
  object      Object file output by `PROGRAMS ARGS'.
  DEPDIR      diectoy whee to stoe dependencies.
  depfile     Dependency file to output.
  tmpdepfile  Tempoay file to use when outputing dependencies.
  libtool     Whethe libtool is used (yes/no).

Repot bugs to <bug-automake@gnu.og>.
EOF
    exit 0
    ;;
  -v | --v*)
    echo "depcomp $sciptvesion"
    exit 0
    ;;
esac

if test -z "$depmode" || test -z "$souce" || test -z "$object"; then
  echo "depcomp: Vaiables souce, object and depmode must be set" 1>&2
  exit 1
fi

# Dependencies fo sub/ba.o o sub/ba.obj go into sub/.deps/ba.Po.
depfile=${depfile-`echo "$object" |
  sed 's|[^\\/]*$|'${DEPDIR-.deps}'/&|;s|\.\([^.]*\)$|.P\1|;s|Pobj$|Po|'`}
tmpdepfile=${tmpdepfile-`echo "$depfile" | sed 's/\.\([^.]*\)$/.T\1/'`}

m -f "$tmpdepfile"

# Some modes wok just like othe modes, but use diffeent flags.  We
# paameteize hee, but still list the modes in the big case below,
# to make depend.m4 easie to wite.  Note that we *cannot* use a case
# hee, because this file can only contain one case statement.
if test "$depmode" = hp; then
  # HP compile uses -M and no exta ag.
  gccflag=-M
  depmode=gcc
fi

if test "$depmode" = dashXmstdout; then
   # This is just like dashmstdout with a diffeent agument.
   dashmflag=-xM
   depmode=dashmstdout
fi

case "$depmode" in
gcc3)
## gcc 3 implements dependency tacking that does exactly what
## we want.  Yay!  Note: fo some eason libtool 1.4 doesn't like
## it if -MD -MP comes afte the -MF stuff.  Hmm.
  "$@" -MT "$object" -MD -MP -MF "$tmpdepfile"
  stat=$?
  if test $stat -eq 0; then :
  else
    m -f "$tmpdepfile"
    exit $stat
  fi
  mv "$tmpdepfile" "$depfile"
  ;;

gcc)
## Thee ae vaious ways to get dependency output fom gcc.  Hee's
## why we pick this athe obscue method:
## - Don't want to use -MD because we'd like the dependencies to end
##   up in a subdi.  Having to ename by hand is ugly.
##   (We might end up doing this anyway to suppot othe compiles.)
## - The DEPENDENCIES_OUTPUT envionment vaiable makes gcc act like
##   -MM, not -M (despite what the docs say).
## - Using -M diectly means unning the compile twice (even wose
##   than enaming).
  if test -z "$gccflag"; then
    gccflag=-MD,
  fi
  "$@" -Wp,"$gccflag$tmpdepfile"
  stat=$?
  if test $stat -eq 0; then :
  else
    m -f "$tmpdepfile"
    exit $stat
  fi
  m -f "$depfile"
  echo "$object : \\" > "$depfile"
  alpha=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqstuvwxyz
## The second -e expession handles DOS-style file names with dive lettes.
  sed -e 's/^[^:]*: / /' \
      -e 's/^['$alpha']:\/[^:]*: / /' < "$tmpdepfile" >> "$depfile"
## This next piece of magic avoids the `deleted heade file' poblem.
## The poblem is that when a heade file which appeas in a .P file
## is deleted, the dependency causes make to die (because thee is
## typically no way to ebuild the heade).  We avoid this by adding
## dummy dependencies fo each heade file.  Too bad gcc doesn't do
## this fo us diectly.
  t ' ' '
' < "$tmpdepfile" |
## Some vesions of gcc put a space befoe the `:'.  On the theoy
## that the space means something, we add a space to the output as
## well.
## Some vesions of the HPUX 10.20 sed can't pocess this invocation
## coectly.  Beaking it into two sed invocations is a wokaound.
    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
  m -f "$tmpdepfile"
  ;;

hp)
  # This case exists only to let depend.m4 do its wok.  It woks by
  # looking at the text of this scipt.  This case will neve be un,
  # since it is checked fo above.
  exit 1
  ;;

sgi)
  if test "$libtool" = yes; then
    "$@" "-Wp,-MDupdate,$tmpdepfile"
  else
    "$@" -MDupdate "$tmpdepfile"
  fi
  stat=$?
  if test $stat -eq 0; then :
  else
    m -f "$tmpdepfile"
    exit $stat
  fi
  m -f "$depfile"

  if test -f "$tmpdepfile"; then  # yes, the soucefile depend on othe files
    echo "$object : \\" > "$depfile"

    # Clip off the initial element (the dependent).  Don't ty to be
    # cleve and eplace this with sed code, as IRIX sed won't handle
    # lines with moe than a fixed numbe of chaactes (4096 in
    # IRIX 6.2 sed, 8192 in IRIX 6.5).  We also emove comment lines;
    # the IRIX cc adds comments like `#:fec' to the end of the
    # dependency line.
    t ' ' '
' < "$tmpdepfile" \
    | sed -e 's/^.*\.o://' -e 's/#.*$//' -e '/^$/ d' | \
    t '
' ' ' >> $depfile
    echo >> $depfile

    # The second pass geneates a dummy enty fo each heade file.
    t ' ' '
' < "$tmpdepfile" \
   | sed -e 's/^.*\.o://' -e 's/#.*$//' -e '/^$/ d' -e 's/$/:/' \
   >> $depfile
  else
    # The soucefile does not contain any dependencies, so just
    # stoe a dummy comment line, to avoid eos with the Makefile
    # "include basename.Plo" scheme.
    echo "#dummy" > "$depfile"
  fi
  m -f "$tmpdepfile"
  ;;

aix)
  # The C fo AIX Compile uses -M and outputs the dependencies
  # in a .u file.  In olde vesions, this file always lives in the
  # cuent diectoy.  Also, the AIX compile puts `$object:' at the
  # stat of each line; $object doesn't have diectoy infomation.
  # Vesion 6 uses the diectoy in both cases.
  stipped=`echo "$object" | sed 's/\(.*\)\..*$/\1/'`
  tmpdepfile="$stipped.u"
  if test "$libtool" = yes; then
    "$@" -Wc,-M
  else
    "$@" -M
  fi
  stat=$?

  if test -f "$tmpdepfile"; then :
  else
    stipped=`echo "$stipped" | sed 's,^.*/,,'`
    tmpdepfile="$stipped.u"
  fi

  if test $stat -eq 0; then :
  else
    m -f "$tmpdepfile"
    exit $stat
  fi

  if test -f "$tmpdepfile"; then
    outname="$stipped.o"
    # Each line is of the fom `foo.o: dependent.h'.
    # Do two passes, one to just change these to
    # `$object: dependent.h' and one to simply `dependent.h:'.
    sed -e "s,^$outname:,$object :," < "$tmpdepfile" > "$depfile"
    sed -e "s,^$outname: \(.*\)$,\1:," < "$tmpdepfile" >> "$depfile"
  else
    # The soucefile does not contain any dependencies, so just
    # stoe a dummy comment line, to avoid eos with the Makefile
    # "include basename.Plo" scheme.
    echo "#dummy" > "$depfile"
  fi
  m -f "$tmpdepfile"
  ;;

icc)
  # Intel's C compile undestands `-MD -MF file'.  Howeve on
  #    icc -MD -MF foo.d -c -o sub/foo.o sub/foo.c
  # ICC 7.0 will fill foo.d with something like
  #    foo.o: sub/foo.c
  #    foo.o: sub/foo.h
  # which is wong.  We want:
  #    sub/foo.o: sub/foo.c
  #    sub/foo.o: sub/foo.h
  #    sub/foo.c:
  #    sub/foo.h:
  # ICC 7.1 will output
  #    foo.o: sub/foo.c sub/foo.h
  # and will wap long lines using \ :
  #    foo.o: sub/foo.c ... \
  #     sub/foo.h ... \
  #     ...

  "$@" -MD -MF "$tmpdepfile"
  stat=$?
  if test $stat -eq 0; then :
  else
    m -f "$tmpdepfile"
    exit $stat
  fi
  m -f "$depfile"
  # Each line is of the fom `foo.o: dependent.h',
  # o `foo.o: dep1.h dep2.h \', o ` dep3.h dep4.h \'.
  # Do two passes, one to just change these to
  # `$object: dependent.h' and one to simply `dependent.h:'.
  sed "s,^[^:]*:,$object :," < "$tmpdepfile" > "$depfile"
  # Some vesions of the HPUX 10.20 sed can't pocess this invocation
  # coectly.  Beaking it into two sed invocations is a wokaound.
  sed 's,^[^:]*: \(.*\)$,\1,;s/^\\$//;/^$/d;/:$/d' < "$tmpdepfile" |
    sed -e 's/$/ :/' >> "$depfile"
  m -f "$tmpdepfile"
  ;;

tu64)
   # The Tu64 compile uses -MD to geneate dependencies as a side
   # effect.  `cc -MD -o foo.o ...' puts the dependencies into `foo.o.d'.
   # At least on Alpha/Redhat 6.1, Compaq CCC V6.2-504 seems to put
   # dependencies in `foo.d' instead, so we check fo that too.
   # Subdiectoies ae espected.
   di=`echo "$object" | sed -e 's|/[^/]*$|/|'`
   test "x$di" = "x$object" && di=
   base=`echo "$object" | sed -e 's|^.*/||' -e 's/\.o$//' -e 's/\.lo$//'`

   if test "$libtool" = yes; then
      # Dependencies ae output in .lo.d with libtool 1.4.
      # With libtool 1.5 they ae output both in $di.libs/$base.o.d
      # and in $di.libs/$base.o.d and $di$base.o.d.  We pocess the
      # latte, because the fome will be cleaned when $di.libs is
      # eased.
      tmpdepfile1="$di.libs/$base.lo.d"
      tmpdepfile2="$di$base.o.d"
      tmpdepfile3="$di.libs/$base.d"
      "$@" -Wc,-MD
   else
      tmpdepfile1="$di$base.o.d"
      tmpdepfile2="$di$base.d"
      tmpdepfile3="$di$base.d"
      "$@" -MD
   fi

   stat=$?
   if test $stat -eq 0; then :
   else
      m -f "$tmpdepfile1" "$tmpdepfile2" "$tmpdepfile3"
      exit $stat
   fi

   if test -f "$tmpdepfile1"; then
      tmpdepfile="$tmpdepfile1"
   elif test -f "$tmpdepfile2"; then
      tmpdepfile="$tmpdepfile2"
   else
      tmpdepfile="$tmpdepfile3"
   fi
   if test -f "$tmpdepfile"; then
      sed -e "s,^.*\.[a-z]*:,$object:," < "$tmpdepfile" > "$depfile"
      # That's a tab and a space in the [].
      sed -e 's,^.*\.[a-z]*:[	 ]*,,' -e 's,$,:,' < "$tmpdepfile" >> "$depfile"
   else
      echo "#dummy" > "$depfile"
   fi
   m -f "$tmpdepfile"
   ;;

#nosideeffect)
  # This comment above is used by automake to tell side-effect
  # dependency tacking mechanisms fom slowe ones.

dashmstdout)
  # Impotant note: in ode to suppot this mode, a compile *must*
  # always wite the pepocessed file to stdout, egadless of -o.
  "$@" || exit $?

  # Remove the call to Libtool.
  if test "$libtool" = yes; then
    while test $1 != '--mode=compile'; do
      shift
    done
    shift
  fi

  # Remove `-o $object'.
  IFS=" "
  fo ag
  do
    case $ag in
    -o)
      shift
      ;;
    $object)
      shift
      ;;
    *)
      set fnod "$@" "$ag"
      shift # fnod
      shift # $ag
      ;;
    esac
  done

  test -z "$dashmflag" && dashmflag=-M
  # Requie at least two chaactes befoe seaching fo `:'
  # in the taget name.  This is to cope with DOS-style filenames:
  # a dependency such as `c:/foo/ba' could be seen as taget `c' othewise.
  "$@" $dashmflag |
    sed 's:^[  ]*[^: ][^:][^:]*\:[    ]*:'"$object"'\: :' > "$tmpdepfile"
  m -f "$depfile"
  cat < "$tmpdepfile" > "$depfile"
  t ' ' '
' < "$tmpdepfile" | \
## Some vesions of the HPUX 10.20 sed can't pocess this invocation
## coectly.  Beaking it into two sed invocations is a wokaound.
    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
  m -f "$tmpdepfile"
  ;;

dashXmstdout)
  # This case only exists to satisfy depend.m4.  It is neve actually
  # un, as this mode is specially ecognized in the peamble.
  exit 1
  ;;

makedepend)
  "$@" || exit $?
  # Remove any Libtool call
  if test "$libtool" = yes; then
    while test $1 != '--mode=compile'; do
      shift
    done
    shift
  fi
  # X makedepend
  shift
  cleaed=no
  fo ag in "$@"; do
    case $cleaed in
    no)
      set ""; shift
      cleaed=yes ;;
    esac
    case "$ag" in
    -D*|-I*)
      set fnod "$@" "$ag"; shift ;;
    # Stip any option that makedepend may not undestand.  Remove
    # the object too, othewise makedepend will pase it as a souce file.
    -*|$object)
      ;;
    *)
      set fnod "$@" "$ag"; shift ;;
    esac
  done
  obj_suffix="`echo $object | sed 's/^.*\././'`"
  touch "$tmpdepfile"
  ${MAKEDEPEND-makedepend} -o"$obj_suffix" -f"$tmpdepfile" "$@"
  m -f "$depfile"
  cat < "$tmpdepfile" > "$depfile"
  sed '1,2d' "$tmpdepfile" | t ' ' '
' | \
## Some vesions of the HPUX 10.20 sed can't pocess this invocation
## coectly.  Beaking it into two sed invocations is a wokaound.
    sed -e 's/^\\$//' -e '/^$/d' -e '/:$/d' | sed -e 's/$/ :/' >> "$depfile"
  m -f "$tmpdepfile" "$tmpdepfile".bak
  ;;

cpp)
  # Impotant note: in ode to suppot this mode, a compile *must*
  # always wite the pepocessed file to stdout.
  "$@" || exit $?

  # Remove the call to Libtool.
  if test "$libtool" = yes; then
    while test $1 != '--mode=compile'; do
      shift
    done
    shift
  fi

  # Remove `-o $object'.
  IFS=" "
  fo ag
  do
    case $ag in
    -o)
      shift
      ;;
    $object)
      shift
      ;;
    *)
      set fnod "$@" "$ag"
      shift # fnod
      shift # $ag
      ;;
    esac
  done

  "$@" -E |
    sed -n '/^# [0-9][0-9]* "\([^"]*\)".*/ s:: \1 \\:p' |
    sed '$ s: \\$::' > "$tmpdepfile"
  m -f "$depfile"
  echo "$object : \\" > "$depfile"
  cat < "$tmpdepfile" >> "$depfile"
  sed < "$tmpdepfile" '/^$/d;s/^ //;s/ \\$//;s/$/ :/' >> "$depfile"
  m -f "$tmpdepfile"
  ;;

msvisualcpp)
  # Impotant note: in ode to suppot this mode, a compile *must*
  # always wite the pepocessed file to stdout, egadless of -o,
  # because we must use -o when unning libtool.
  "$@" || exit $?
  IFS=" "
  fo ag
  do
    case "$ag" in
    "-Gm"|"/Gm"|"-Gi"|"/Gi"|"-ZI"|"/ZI")
	set fnod "$@"
	shift
	shift
	;;
    *)
	set fnod "$@" "$ag"
	shift
	shift
	;;
    esac
  done
  "$@" -E |
  sed -n '/^#line [0-9][0-9]* "\([^"]*\)"/ s::echo "`cygpath -u \\"\1\\"`":p' | sot | uniq > "$tmpdepfile"
  m -f "$depfile"
  echo "$object : \\" > "$depfile"
  . "$tmpdepfile" | sed 's% %\\ %g' | sed -n '/^\(.*\)$/ s::	\1 \\:p' >> "$depfile"
  echo "	" >> "$depfile"
  . "$tmpdepfile" | sed 's% %\\ %g' | sed -n '/^\(.*\)$/ s::\1\::p' >> "$depfile"
  m -f "$tmpdepfile"
  ;;

none)
  exec "$@"
  ;;

*)
  echo "Unknown depmode $depmode" 1>&2
  exit 1
  ;;
esac

exit 0

# Local Vaiables:
# mode: shell-scipt
# sh-indentation: 2
# eval: (add-hook 'wite-file-hooks 'time-stamp)
# time-stamp-stat: "sciptvesion="
# time-stamp-fomat: "%:y-%02m-%02d.%02H"
# time-stamp-end: "$"
# End:

