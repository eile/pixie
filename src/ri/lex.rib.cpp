#define yy_create_buffer rib_create_buffer
#define yy_delete_buffer rib_delete_buffer
#define yy_scan_buffer rib_scan_buffer
#define yy_scan_string rib_scan_string
#define yy_scan_bytes rib_scan_bytes
#define yy_flex_debug rib_flex_debug
#define yy_init_buffer rib_init_buffer
#define yy_flush_buffer rib_flush_buffer
#define yy_load_buffer_state rib_load_buffer_state
#define yy_switch_to_buffer rib_switch_to_buffer
#define yyin ribin
#define yyleng ribleng
#define yylex riblex
#define yyout ribout
#define yyrestart ribrestart
#define yytext ribtext

#line 19 "lex.rib.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
static yyconst short int yy_accept[878] =
    {   0,
      118,  118,  126,  125,  120,  123,  125,  122,  118,  125,
      118,  114,  115,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  124,    0,  116,  122,  121,    0,
      118,    0,  118,  119,  118,    0,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,    0,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  121,  119,  118,  118,    0,    0,  118,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  118,    0,    0,  119,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,   75,  117,  117,  117,  117,

      117,  117,  117,  117,   79,  117,  109,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       57,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  113,  117,  117,  117,  117,   69,  117,   42,  117,
       29,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,   23,
      117,  117,  117,  107,  117,  117,  117,  117,  117,  117,

      117,  117,  117,   41,  117,  117,  117,  117,  117,  117,
      117,   70,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   56,  117,  117,  117,   49,  117,
      117,  117,  117,  117,   80,  117,  117,  117,  117,  117,
      117,  117,  117,   84,  117,  117,  117,  117,  117,  117,
       81,  117,  117,  117,  117,   43,  117,  108,  117,  117,
      117,    6,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   19,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,   26,  117,  117,  117,  117,  117,  117,
      117,   82,  117,  117,  117,  117,  117,  117,  117,  117,

       55,  117,  117,  117,  117,  117,   74,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,    1,  117,  117,
      117,  117,   21,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  106,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   72,  117,  117,  117,   30,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   65,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   14,  117,
      117,  117,   35,  117,  117,  117,  117,  112,  117,  117,
      117,  117,  117,  117,  117,  117,   11,  117,  117,  117,

      117,  117,   76,  117,  117,  117,  117,  117,  117,   18,
       38,  117,  117,    3,  117,  117,   85,  117,   50,  117,
       37,  117,   96,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,   20,  117,  117,  103,  117,  117,  117,
      117,  117,   88,  117,  117,  117,  117,  117,  117,    5,
      117,  117,  117,  117,  117,   64,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       93,  117,   90,  117,  117,  117,   71,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   51,   54,   73,  117,
      117,  102,  117,  117,   36,  117,  117,  117,  117,  117,
      117,  117,    9,  117,  117,  117,  117,  117,  117,  117,
        2,  117,  117,  117,  117,   34,  117,  117,  117,   99,
      117,  117,  117,  117,  117,   78,  117,  117,  117,  117,
      117,  117,   86,   10,  117,  117,  117,  117,  117,  117,
      117,  117,   87,  117,  117,  117,  117,    4,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   58,  117,
       44,  117,  117,  117,  117,  117,  117,  117,   77,   32,

      117,  117,   94,   92,   89,  117,   47,   53,   17,  117,
      117,  117,  117,  117,  117,  117,  105,  117,  117,  117,
       39,  117,  117,  117,  117,  101,  117,  117,  117,   28,
      117,   24,  117,  117,  117,   13,   59,  117,  111,  117,
      117,  117,  117,  117,  117,  117,  117,   16,  117,  117,
      117,    0,    0,  117,  117,  117,    8,  117,  117,  117,
      117,   63,  100,  117,  117,   12,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   95,  117,   15,  117,
      117,    0,  110,  117,  104,  117,  117,  117,  117,  117,
      117,   27,  117,  117,  117,   22,  117,   66,  117,  117,

      117,  117,   91,  117,   67,   25,  117,  117,  117,  117,
       62,   33,   52,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,   83,  117,   60,  117,    7,  117,  117,
      117,  117,  117,  117,  117,  117,   61,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       48,  117,   31,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   40,  117,  117,  117,  117,   68,
       45,  117,  117,   97,   46,   98,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    1,    7,    8,    1,    9,    9,    9,
       10,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       11,    1,   12,    1,   13,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   40
    } ;

static yyconst int yy_meta[41] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1
    } ;

static yyconst short int yy_base[883] =
    {   0,
        0,    0,  938,  939,  939,  939,  932,  932,   33,   35,
       38,  939,  939,   19,   35,   30,   35,   60,   31,  917,
       43,   57,    0,  912,   52,  899,   57,   76,  898,   59,
       92,   61,  913,  902,  939,  924,  939,    0,    0,   86,
       91,   96,  101,  113,  119,  108,    0,   55,   99,  896,
      899,  892,  903,  108,  896,  892,  897,  122,  889,  130,
      133,  888,  888,  101,  887,  903,  117,  899,  886,  896,
       60,  888,  898,  878,  890,   69,  876,  879,  884,  132,
      884,  116,  874,  867,  128,  875,  888,  134,  868,  140,
      138,  883,  881,  873,  876,  142,  859,  864,  142,  863,

      862,    0,  152,  158,  166,  170,  172,  176,  871,  877,
      862,  858,  866,  872,  859,  856,  856,  142,  852,  853,
      846,  858,  854,  850,  844,  862,  154,  857,  846,  845,
      854,  845,  844,  851,  842,  849,  848,  838,  846,  836,
      828,  841,  842,  838,  840,  824,  834,  841,  836,  837,
      830,  833,  836,  833,  816,  829,  819,  807,  171,  817,
      826,  828,  813,  822,  825,  813,  819,  819,  802,  816,
      797,  810,  813,  813,  810,  795,  793,  799,  799,  792,
      798,  179,  181,  183,  186,  800,  796,  788,  797,  786,
      802,  799,  786,  783,  799,    0,  795,  775,  792,  782,

      794,  776,  785,  783,    0,  779,  781,  771,  769,  769,
      785,  780,  766,  778,  764,  763,  760,  772,  774,  764,
      771,  757,  754,  183,  768,  757,  751,  767,  760,  753,
      753,  764,  757,  748,  751,  742,  754,  755,  754,  738,
      756,  736,  734,  736,  733,  747,  746,  741,  729,  729,
        0,  743,  728,  736,  743,  722,  723,  722,  737,  730,
      734,  191,  715,  727,  719,  732,    0,  708,    0,  723,
      712,  710,  180,  720,  709,  723,  708,  712,  709,  711,
      721,  715,  712,  698,  709,  697,  189,  715,  695,    0,
      712,  704,  703,    0,  702,  692,  700,  689,  686,  685,

      704,  696,  698,    0,  688,  698,  680,  679,  684,  677,
      681,  682,  689,  186,  674,  677,  687,  687,  680,  670,
      678,  668,  666,  679,    0,  669,  668,  676,    0,  191,
      675,  657,  675,  659,    0,  192,  655,  660,  195,  669,
      666,  664,  650,    0,  656,  668,  648,  653,  641,  651,
        0,  659,  658,  661,  655,  642,  198,    0,  658,  640,
      642,    0,  637,  650,  640,  641,  634,  636,  630,  635,
      634,    0,  632,  631,  632,  642,  623,  641,  617,  204,
      632,  205,  614,    0,  637,  625,  631,  632,  625,  632,
      631,  204,  617,  609,  609,  602,  624,  604,  622,  619,

        0,  600,  615,  603,  615,  605,    0,  609,  612,  611,
      600,  613,  595,  598,  606,  596,  210,  601,  603,  587,
      599,  592,  586,  602,  583,  597,  582,    0,  579,  592,
      596,  591,  592,  580,  588,  574,  575,  583,  585,  572,
      204,  575,  561,    0,  584,  566,  562,  566,  576,  568,
      575,  558,  572,  562,    0,  570,  560,  559,    0,  552,
      556,  551,  549,  556,  554,  548,  560,  549,    0,  545,
      553,  556,  552,  554,  553,  542,  547,  207,    0,  548,
      550,  534,    0,  549,  533,  530,  527,    0,  541,  543,
      541,  531,  539,  523,  524,  536,  524,  523,  537,  517,

      516,  520,    0,  525,  524,  518,  518,  522,  525,    0,
        0,  523,  518,    0,  511,  522,    0,  509,    0,  503,
        0,  504,    0,  515,  505,  504,  497,  510,  512,  508,
      510,  494,  503,  502,  502,  500,  488,  491,  497,  491,
      492,  502,  487,    0,  492,  496,  216,  481,  484,  483,
      495,  486,    0,  485,  478,  479,  486,  485,  480,    0,
      481,  483,  483,  466,  479,  217,  471,  470,  467,  475,
      461,  455,  462,  471,  468,  469,  472,  460,  468,  456,
      457,  216,  459,  462,  463,  464,  450,  440,  444,  452,
        0,  451,    0,  439,  443,  453,    0,  434,  450,  442,

      452,  447,  426,  438,  435,  426,  442,  441,  431,  435,
      439,  422,  421,  426,  424,  423,  222,    0,    0,  423,
      427,    0,  420,  419,    0,  428,  418,  430,  425,  410,
      409,  422,    0,   27,   87,  106,  136,  212,  225,  211,
        0,  207,  217,  230,  232,    0,  232,  235,  232,    0,
      235,  227,  228,  242,  230,    0,  240,  228,  242,  234,
      231,  243,    0,    0,  246,  232,  246,  250,  250,  241,
      252,  253,    0,  245,  242,  256,  248,    0,  249,  246,
      244,  259,  263,  254,  250,  264,  246,  258,    0,  269,
        0,  254,  261,  258,  259,  271,  263,  264,    0,    0,

      276,  277,  286,    0,    0,  270,    0,    0,    0,  266,
      283,  286,  273,  300,  289,  282,    0,  279,  271,  277,
        0,  283,  293,  291,  295,    0,  296,  283,  293,    0,
      298,    0,  289,  286,  287,    0,    0,  302,    0,  307,
      294,  292,  293,  307,  299,  310,  312,    0,  311,  305,
      304,  330,  328,  312,  309,  304,    0,  309,  321,  318,
      319,    0,    0,  326,  316,    0,  313,  312,  327,  322,
      315,  322,  322,  333,  325,  318,    0,  336,    0,  326,
      324,  352,  939,  333,    0,  345,  332,  329,  335,  336,
      346,    0,  339,  348,  339,    0,  346,    0,  332,  338,

      336,  350,    0,  345,    0,    0,  341,  350,  355,  363,
        0,    0,    0,  352,  348,  352,  359,  364,  361,  353,
      360,  364,  373,    0,  355,    0,  363,    0,  364,  364,
      361,  365,  356,  367,  363,  379,    0,  384,  366,  372,
      374,  382,  376,  382,  373,  373,  393,  381,  383,  382,
        0,  383,    0,  390,  380,  388,  397,  389,  390,  390,
      397,  402,  394,  390,    0,  396,  396,  398,  393,    0,
        0,  400,  395,    0,    0,    0,  939,  428,  431,  430,
      434,  437
    } ;

static yyconst short int yy_def[883] =
    {   0,
      877,    1,  877,  877,  877,  877,  878,  879,  877,  877,
      877,  877,  877,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  877,  878,  877,  879,  881,  877,
      877,  877,  877,  877,  877,  877,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  877,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  881,  877,  877,  877,  877,  877,  877,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  877,  877,  877,  877,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  877,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  877,  882,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  882,  877,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,    0,  877,  877,  877,
      877,  877
    } ;

static yyconst short int yy_nxt[980] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,   10,   11,   11,
       12,   13,    4,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   23,   33,   34,   23,   23,   23,   35,
       40,   41,   41,   43,   43,   44,   45,   45,   50,   48,
       42,   49,   58,  689,   53,   46,   59,   54,   65,   51,
       55,   66,   52,   56,   68,   76,   60,   57,   61,   61,
      109,   79,  110,   70,  139,   71,   88,  140,   97,   77,
       69,   72,   73,   74,   62,   80,   89,   81,   98,   82,
       63,   99,  145,   83,   43,   43,   64,   84,  103,   41,

       41,  146,   60,   85,  104,  104,   86,   90,   46,   43,
       43,  690,   91,   92,  107,   93,  108,  108,   42,   94,
       95,  105,  105,  691,  111,   96,   44,   45,   45,  130,
      106,  112,  117,  131,  118,  119,   46,  123,  104,  104,
      124,   61,   61,  134,  135,  150,  153,  161,  154,  157,
      125,  168,  158,  166,  126,  178,  174,  195,  162,  196,
      182,  182,  692,  179,  151,  163,  104,  104,  164,  106,
      167,  169,  175,  183,  105,  105,  184,  205,  185,  185,
      108,  108,  206,   46,  108,  108,  238,  182,  182,  262,
      262,  185,  185,  239,  185,  185,   46,  299,  300,  262,

      262,  348,  363,  364,  389,  405,  365,  301,  406,  415,
      411,  349,  416,  432,  302,  303,  412,  390,  453,  456,
      391,  454,  457,  467,  491,  516,  458,  492,  550,  643,
      608,  626,  468,  609,  627,  433,  676,  551,  693,  677,
      493,  517,  694,  695,  696,  697,  644,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  727,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,

      751,  752,  754,  755,  753,  756,  757,  758,  759,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  770,
      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,
      781,  752,  783,  784,  753,  785,  786,  787,  788,  789,
      790,  791,  792,  793,  794,  795,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  783,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  842,  843,  844,  845,  846,  847,  848,

      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,   36,   36,
       36,   38,   47,   38,  102,  688,  102,  782,  782,  782,
      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  625,  624,  623,  622,

      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,

      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  466,  465,  464,  463,  462,  461,
      460,  459,  455,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  414,  413,  410,
      409,  408,  407,  404,  403,  402,  401,  400,  399,  398,

      397,  396,  395,  394,  393,  392,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,

      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  204,  203,  202,  201,  200,
      199,  198,  197,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  181,  180,  177,  176,  173,  172,  171,  170,

      165,  160,  159,  156,  155,  152,  149,  148,  147,  144,
      143,  142,  141,  138,  137,  136,  133,  132,  129,  128,
      127,  122,  121,  120,  116,  115,  114,  113,   37,  101,
      100,   87,   78,   75,   67,   39,   37,  877,    3,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877
    } ;

static yyconst short int yy_chk[980] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        9,    9,    9,   10,   10,   11,   11,   11,   15,   14,
        9,   14,   17,  634,   16,   11,   17,   16,   19,   15,
       16,   19,   15,   16,   21,   25,   18,   16,   18,   18,
       48,   27,   48,   22,   71,   22,   30,   71,   32,   25,
       21,   22,   22,   22,   18,   27,   30,   27,   32,   28,
       18,   32,   76,   28,   40,   40,   18,   28,   41,   41,

       41,   76,   42,   28,   42,   42,   28,   31,   41,   43,
       43,  635,   31,   31,   46,   31,   46,   46,   43,   31,
       31,   44,   44,  636,   49,   31,   45,   45,   45,   64,
       44,   49,   54,   64,   54,   54,   45,   58,   60,   60,
       58,   61,   61,   67,   67,   80,   82,   88,   82,   85,
       58,   91,   85,   90,   58,   99,   96,  118,   88,  118,
      103,  103,  637,   99,   80,   88,  104,  104,   88,  103,
       90,   91,   96,  105,  105,  105,  106,  127,  106,  106,
      107,  107,  127,  105,  108,  108,  159,  182,  182,  183,
      183,  184,  184,  159,  185,  185,  182,  224,  224,  262,

      262,  273,  287,  287,  314,  330,  287,  224,  330,  339,
      336,  273,  339,  357,  224,  224,  336,  314,  380,  382,
      314,  380,  382,  392,  417,  441,  382,  417,  478,  582,
      547,  566,  392,  547,  566,  357,  617,  478,  638,  617,
      417,  441,  639,  640,  642,  643,  582,  644,  645,  647,
      648,  649,  651,  652,  653,  654,  655,  657,  658,  659,
      660,  661,  662,  665,  666,  667,  668,  669,  670,  671,
      672,  674,  675,  676,  677,  679,  680,  681,  682,  683,
      684,  685,  686,  687,  688,  690,  692,  693,  694,  695,
      696,  697,  698,  701,  702,  703,  706,  710,  711,  712,

      713,  714,  715,  716,  714,  718,  719,  720,  722,  723,
      724,  725,  727,  728,  729,  731,  733,  734,  735,  738,
      740,  741,  742,  743,  744,  745,  746,  747,  749,  750,
      751,  752,  753,  754,  752,  755,  756,  758,  759,  760,
      761,  764,  765,  767,  768,  769,  770,  771,  772,  773,
      774,  775,  776,  778,  780,  781,  782,  784,  786,  787,
      788,  789,  790,  791,  793,  794,  795,  797,  799,  800,
      801,  802,  804,  807,  808,  809,  810,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  823,  825,  827,  829,
      830,  831,  832,  833,  834,  835,  836,  838,  839,  840,

      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      852,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      863,  864,  866,  867,  868,  869,  872,  873,  878,  878,
      878,  879,  880,  879,  881,  632,  881,  882,  882,  882,
      631,  630,  629,  628,  627,  626,  624,  623,  621,  620,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  596,
      595,  594,  592,  590,  589,  588,  587,  586,  585,  584,
      583,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  565,  564,  563,  562,

      561,  559,  558,  557,  556,  555,  554,  552,  551,  550,
      549,  548,  546,  545,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  522,  520,  518,  516,  515,  513,
      512,  509,  508,  507,  506,  505,  504,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  487,  486,  485,  484,  482,  481,  480,  477,  476,
      475,  474,  473,  472,  471,  470,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  458,  457,  456,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  443,  442,

      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  406,  405,  404,  403,  402,  400,  399,  398,  397,
      396,  395,  394,  393,  391,  390,  389,  388,  387,  386,
      385,  383,  381,  379,  378,  377,  376,  375,  374,  373,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  361,
      360,  359,  356,  355,  354,  353,  352,  350,  349,  348,
      347,  346,  345,  343,  342,  341,  340,  338,  337,  334,
      333,  332,  331,  328,  327,  326,  324,  323,  322,  321,

      320,  319,  318,  317,  316,  315,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  293,  292,  291,  289,  288,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  272,  271,  270,  268,  266,  265,  264,  263,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,

      209,  208,  207,  206,  204,  203,  202,  201,  200,  199,
      198,  197,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  160,  158,  157,  156,  155,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  130,  129,  128,  126,  125,  124,  123,  122,
      121,  120,  119,  117,  116,  115,  114,  113,  112,  111,
      110,  109,  101,  100,   98,   97,   95,   94,   93,   92,

       89,   87,   86,   84,   83,   81,   79,   78,   77,   75,
       74,   73,   72,   70,   69,   68,   66,   65,   63,   62,
       59,   57,   56,   55,   53,   52,   51,   50,   36,   34,
       33,   29,   26,   24,   20,    8,    7,    3,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "rib.l"
#define INITIAL 0
#line 2 "rib.l"
// Saves information about a rib file
typedef struct TRibFile {
	int				ribLineno;
	const char		*ribFile;
	YY_BUFFER_STATE	ribState;
	TRibFile		*next;
} TRibFile;

static	TRibFile	*ribStack	=	NULL;

// Tell flex how to define yylex for pure parser
#undef YY_DECL
#define YY_DECL int yylex( YYSTYPE *yylval )

#ifdef HAVE_ZLIB

// Overwrite the YYinput so that it uses libz
#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)	if ( (retval = gzread(ribin,buf,maxlen)) < 0) 			\
											YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

#define YY_NEVER_INTERACTIVE 1
#line 911 "lex.rib.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 28 "rib.l"

#line 1064 "lex.rib.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 878 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 939 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 29 "rib.l"
return RIB_DECLARE;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "rib.l"
return RIB_FRAME_BEGIN;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "rib.l"
return RIB_FRAME_END;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "rib.l"
return RIB_WORLD_BEGIN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 33 "rib.l"
return RIB_WORLD_END;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 34 "rib.l"
return RIB_FORMAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "rib.l"
return RIB_FRAME_ASPECT_RATIO;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "rib.l"
return RIB_SCREEN_WINDOW;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "rib.l"
return RIB_CROP_WINDOW;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "rib.l"
return RIB_PROJECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "rib.l"
return RIB_CLIPPING;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 "rib.l"
return RIB_CLIPPING_PLANE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 41 "rib.l"
return RIB_DEPTH_OF_FIELD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 42 "rib.l"
return RIB_SHUTTER;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 43 "rib.l"
return RIB_PIXEL_VARIANCE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 44 "rib.l"
return RIB_PIXEL_SAMPLES;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "rib.l"
return RIB_PIXEL_FILTER;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 46 "rib.l"
return RIB_EXPOSURE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 47 "rib.l"
return RIB_IMAGER;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 48 "rib.l"
return RIB_QUANTIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 49 "rib.l"
return RIB_DISPLAY;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 50 "rib.l"
return RIB_DISPLAYCHANNEL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 51 "rib.l"
return RIB_HIDER;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 52 "rib.l"
return RIB_COLOR_SAMPLES;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 53 "rib.l"
return RIB_RELATIVE_DETAIL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 54 "rib.l"
return RIB_OPTION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "rib.l"
return RIB_ATTRIBUTE_BEGIN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "rib.l"
return RIB_ATTRIBUTE_END;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "rib.l"
return RIB_COLOR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "rib.l"
return RIB_OPACITY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "rib.l"
return RIB_TEXTURE_COORDINATES;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "rib.l"
return RIB_LIGHT_SOURCE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "rib.l"
return RIB_AREA_LIGHT_SOURCE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "rib.l"
return RIB_ILLUMINATE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "rib.l"
return RIB_SURFACE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "rib.l"
return RIB_ATMOSPHERE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "rib.l"
return RIB_INTERIOR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "rib.l"
return RIB_EXTERIOR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "rib.l"
return RIB_SHADING_RATE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "rib.l"
return RIB_SHADING_INTERPOLATION;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "rib.l"
return RIB_MATTE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "rib.l"
return RIB_BOUND;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "rib.l"
return RIB_DETAIL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "rib.l"
return RIB_DETAIL_RANGE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "rib.l"
return RIB_GEOMETRIC_APPROXIMATION;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "rib.l"
return RIB_GEOMETRIC_REPRESENTATION;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "rib.l"
return RIB_ORIENTATION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "rib.l"
return RIB_REVERSE_ORIENTATION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "rib.l"
return RIB_SIDES;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 80 "rib.l"
return RIB_IDENTITY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 81 "rib.l"
return RIB_TRANSFORM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 82 "rib.l"
return RIB_CONCAT_TRANSFORM;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 83 "rib.l"
return RIB_PERSPECTIVE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 84 "rib.l"
return RIB_TRANSLATE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 85 "rib.l"
return RIB_ROTATE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 86 "rib.l"
return RIB_SCALE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 87 "rib.l"
return RIB_SKEW;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 88 "rib.l"
return RIB_DEFORMATION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 89 "rib.l"
return RIB_DISPLACEMENT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 90 "rib.l"
return RIB_COORDINATE_SYSTEM;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 91 "rib.l"
return RIB_COORDINATE_SYS_TRANSFORM;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 93 "rib.l"
return RIB_TRANSFORM_BEGIN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 94 "rib.l"
return RIB_TRANSFORM_END;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 "rib.l"
return RIB_ATTRIBUTE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 98 "rib.l"
return RIB_POLYGON;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 99 "rib.l"
return RIB_GENERAL_POLYGON;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 100 "rib.l"
return RIB_POINTS_POLYGONS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 101 "rib.l"
return RIB_POINTS_GENERAL_POLYGONS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 102 "rib.l"
return RIB_BASIS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 103 "rib.l"
return RIB_PATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 104 "rib.l"
return RIB_PATCH_MESH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 105 "rib.l"
return RIB_NU_PATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 "rib.l"
return RIB_TRIM_CURVE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "rib.l"
return RIB_SPHERE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "rib.l"
return RIB_CONE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "rib.l"
return RIB_CYLINDER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "rib.l"
return RIB_HYPERBOLOID;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "rib.l"
return RIB_PARABOLOID;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "rib.l"
return RIB_DISK;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "rib.l"
return RIB_TORUS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "rib.l"
return RIB_CURVES;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "rib.l"
return RIB_POINTS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "rib.l"
return RIB_SUBDIVISION_MESH;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "rib.l"
return RIB_BLOBBY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "rib.l"
return RIB_GEOMETRY;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 121 "rib.l"
return RIB_PROCEDURAL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 123 "rib.l"
return RIB_SOLID_BEGIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 124 "rib.l"
return RIB_SOLID_END;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 "rib.l"
return RIB_OBJECT_BEGIN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 127 "rib.l"
return RIB_OBJECT_END;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "rib.l"
return RIB_OBJECT_INSTANCE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 131 "rib.l"
return RIB_MOTION_BEGIN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 132 "rib.l"
return RIB_MOTION_END;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 134 "rib.l"
return RIB_MAKE_TEXTURE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 135 "rib.l"
return RIB_MAKE_TEXTURE3D;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 136 "rib.l"
return RIB_MAKE_BUMP;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 137 "rib.l"
return RIB_MAKE_LAT_LONG_ENVIRONMENT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 138 "rib.l"
return RIB_MAKE_CUBE_FACE_ENVIRONMENT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 139 "rib.l"
return RIB_MAKE_SHADOW;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 141 "rib.l"
return RIB_ARCHIVE_RECORD;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 143 "rib.l"
return RIB_ARCHIVE_BEGIN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 144 "rib.l"
return RIB_ARCHIVE_END;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 146 "rib.l"
return RIB_RESOURCE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 147 "rib.l"
return RIB_RESOURCE_BEGIN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 148 "rib.l"
return RIB_RESOURCE_END;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "rib.l"
return RIB_IFBEGIN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "rib.l"
return RIB_IFEND;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "rib.l"
return RIB_ELSEIF;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 153 "rib.l"
return RIB_ELSE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 156 "rib.l"
{
														char			fileName[256];
														char			*start	=	strchr(ribtext,'\"');
														char			location[OS_MAX_PATH_LENGTH];
														COptions		*options;

														assert(start != NULL);

														strcpy(fileName,start+1);

														fileName[strlen(fileName)-1]	=	'\0';

														options		=	CRenderer::context->getOptions();

														if (CRenderer::locateFile(location,fileName,options->archivePath) == TRUE) {
															FILE	*in;

															info(CODE_RESOLUTION,"\"%s\" -> \"%s\"\n",fileName,location);

#ifdef HAVE_ZLIB
															in = (FILE *) gzopen( location, "r" );
#else
															in = fopen( location, "r" );
#endif

															if (in != NULL) {
																TRibFile	*newFile	=	new TRibFile;

																newFile->ribLineno		=	ribLineno;
																newFile->ribState		=	YY_CURRENT_BUFFER;
																newFile->ribFile		=	ribFile;
																newFile->next			=	ribStack;
																ribStack				=	newFile;

																ribFile					=	strdup(fileName);
																ribLineno				=	1;																
																ribin					=	in;
																rib_switch_to_buffer(rib_create_buffer( ribin, YY_BUF_SIZE ) );
																BEGIN(INITIAL);
															} else {
																error(CODE_NOFILE,"Unable to open \"%s\" \n",location);
															}
														} else {
															error(CODE_NOFILE,"Unable to find \"%s(.rib)\" \n",fileName);
														}
													}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 203 "rib.l"
return RIB_ERROR_HANDLER;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 205 "rib.l"
return RIB_VERSION;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 206 "rib.l"
return RIB_VERSION_STRING;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 208 "rib.l"
return RIB_ARRAY_BEGIN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 209 "rib.l"
return RIB_ARRAY_END;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 211 "rib.l"
{   assert(strlen(ribtext) < PARSER_MAX_STRING_SIZE);	strcpy(riblval->string,&ribtext[1]);	riblval->string[strlen(riblval->string)-1] = '\0'; return RIB_TEXT;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 212 "rib.l"
{	assert(strlen(ribtext) < PARSER_MAX_STRING_SIZE);	strcpy(riblval->string,ribtext);		return RIB_IDENTIFIER; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 213 "rib.l"
{	sscanf(ribtext,"%f",&riblval->real); return RIB_FLOAT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 214 "rib.l"
{	sscanf(ribtext,"%f",&riblval->real); return RIB_FLOAT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 216 "rib.l"
;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 217 "rib.l"
{	assert(strlen(ribtext) < PARSER_MAX_STRING_SIZE);	strcpy(riblval->string,&ribtext[2]);	return RIB_STRUCTURE_COMMENT;	}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 218 "rib.l"
;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 219 "rib.l"
{	ribLineno++; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 220 "rib.l"
{
														if (ribStack == NULL) {
															yyterminate();
														} else 	{
															TRibFile	*nextFile	=	ribStack->next;
															rib_delete_buffer( YY_CURRENT_BUFFER );
#ifdef HAVE_ZLIB
															gzclose(ribin);
#else
															fclose(ribin);
#endif
															free((char*) ribFile);		// slightly dirty, remove const as we allocated it
															rib_switch_to_buffer(ribStack->ribState);
															ribLineno	=	ribStack->ribLineno;
															ribFile		=	ribStack->ribFile;
															delete ribStack;
															ribStack	=	nextFile;
														}
													}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 239 "rib.l"
{	/* terminate parsing for a runprogram */
														if (ribStack == NULL) {
															yyterminate();
														} else 	{
															TRibFile	*nextFile	=	ribStack->next;
															rib_delete_buffer( YY_CURRENT_BUFFER );
															
#ifdef HAVE_ZLIB
															gzclose(ribin);
#else
															fclose(ribin);
#endif

															free((char*) ribFile);		// slightly dirty, remove const as we allocated it
															rib_switch_to_buffer(ribStack->ribState);
															ribLineno	=	ribStack->ribLineno;
															ribFile		=	ribStack->ribFile;
															delete ribStack;
															ribStack	=	nextFile;
														}
													}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 260 "rib.l"
ECHO;
	YY_BREAK
#line 1859 "lex.rib.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 878 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 878 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 877);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 260 "rib.l"


